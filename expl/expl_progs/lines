cd $HOME/myexpos/spl
./spl $HOME/myexpos/spl/spl_progs/testos.spl
./spl $HOME/myexpos/spl/spl_progs/testtimer.spl
./spl $HOME/myexpos/spl/spl_progs/sample_int7.spl
./spl $HOME/myexpos/spl/spl_progs/mood5.spl
./spl $HOME/myexpos/spl/spl_progs/int10handler.spl
./spl $HOME/myexpos/spl/spl_progs/testboot.spl
./spl $HOME/myexpos/spl/spl_progs/mod4.spl
./spl $HOME/myexpos/spl/spl_progs/mod1.spl
./spl $HOME/myexpos/spl/spl_progs/mod2.spl
./spl $HOME/myexpos/spl/spl_progs/modzero.spl
./spl $HOME/myexpos/spl/spl_progs/consoleint.spl
./spl $HOME/myexpos/spl/spl_progs/sampleint6.spl
./spl $HOME/myexpos/spl/spl_progs/int9.spl
./spl $HOME/myexpos/spl/spl_progs/diskint.spl
./spl $HOME/myexpos/spl/spl_progs/haltprog.spl
cd $HOME/myexpos/xfs-interface
./xfs-interface
fdisk
load --os $HOME/myexpos/spl/spl_progs/testos.xsm
load --exhandler ../spl/spl_progs/haltprog.xsm
load --int=10 ../spl/spl_progs/int10handler.xsm
load --int=7 ../spl/spl_progs/sample_int7.xsm
load --int=timer ../spl/spl_progs/testtimer.xsm
load --int=console ../spl/spl_progs/consoleint.xsm
load --int=disk ../spl/spl_progs/diskint.xsm
load --int=6 ../spl/spl_progs/sampleint6.xsm
load --int=9 ../spl/spl_progs/int9.xsm
load --idle ../expl/samples/idlep.xsm
load --library ../expl/library.lib
load --module 7 ../spl/spl_progs/testboot.xsm
load --module 5 ../spl/spl_progs/mood5.xsm
load --module 0 ../spl/spl_progs/modzero.xsm
load --module 4 ../spl/spl_progs/mod4.xsm
load --module 1 ../spl/spl_progs/mod1.xsm
load --module 2 ../spl/spl_progs/mod2.xsm
load --init ../expl/ass17.xsm
load --exec ../expl/numbers.xsm
exit

cd $HOME/myexpos/xsm
./xsm --timer 200

cd $HOME/myexpos/expl
./expl samples/numbers.expl
./expl samples/oddnos.expl
./expl samples/ass2.expl
./expl samples/idlep.expl

//i = 0;
//while( i<4)
//do
 //   if([INODE_TABLE+ inodeIndex*16 + 2]==-1) then
        break;
    endif;
    R1 = GET_FREE_PAGE;
    call MEMORY_MANAGER;
    [PTBR+8+2*i] = R0;
    [PTBR+8+2*i+1] = "0100";
    i = i+1;
endwhile;

//-------------for exec------------------
PTBR = PAGE_TABLE_BASE+40;//as its the third proccess
PTLR = 10;
//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0110";
[PTBR+6] = -1;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 67;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 84;
[PTBR+17] = "0110";
[PTBR+18] = 85;
[PTBR+19] = "0110";

[PROCESS_TABLE+16*2+1] = 1; //PID 
[PROCESS_TABLE+16*2+4] =CREATED;  // STATE = CREATED
[PROCESS_TABLE+16*2+11] =86; //user area page
[PROCESS_TABLE+16*2+12] = 0; //KPTR
[PROCESS_TABLE+16*2+13] = 8*512; //UPTR
[PROCESS_TABLE+16*2+14] = PTBR;   //PTBR
[PROCESS_TABLE+16*2+15] = 10;     //PTLR
[84*512] = [67 * 512 + 1]; //adress of second word in header, stored at top of user stack

//next one
PTBR = PAGE_TABLE_BASE+60;
PTLR = 10;

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

// Code
[PTBR+8] = 68;
//-------------for exec------------------
PTBR = PAGE_TABLE_BASE+40;//as its the third proccess
PTLR = 10;
//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0110";
[PTBR+6] = -1;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 67;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 84;
[PTBR+17] = "0110";
[PTBR+18] = 85;
[PTBR+19] = "0110";

[PROCESS_TABLE+16*2+1] = 1; //PID 
[PROCESS_TABLE+16*2+4] =CREATED;  // STATE = CREATED
[PROCESS_TABLE+16*2+11] =86; //user area page
[PROCESS_TABLE+16*2+12] = 0; //KPTR
[PROCESS_TABLE+16*2+13] = 8*512; //UPTR
[PROCESS_TABLE+16*2+14] = PTBR;   //PTBR
[PROCESS_TABLE+16*2+15] = 10;     //PTLR
[84*512] = [67 * 512 + 1]; //adress of second word in header, stored at top of user stack

//next one
PTBR = PAGE_TABLE_BASE+60;
PTLR = 10;

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

// Code
[PTBR+8] = 68;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack
[PTBR+16] = 87;
[PTBR+17] = "0110";
[PTBR+18] = 88;
[PTBR+19] = "0110";

// Process Table
[PROCESS_TABLE+48+1] = 1;           // PID
[PROCESS_TABLE+48+4] = CREATED;     // STATE
[PROCESS_TABLE+48+11] = 89;         // User Area Page
[PROCESS_TABLE+48+12] = 0;          // KPTR
[PROCESS_TABLE+48+13] = 8*512;      // UPTR
[PROCESS_TABLE+48+14] = PTBR;
[PROCESS_TABLE+48+15] = PTLR;

// Push entry point
[87*512] = [68*512 + 1];

[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack
[PTBR+16] = 87;
[PTBR+17] = "0110";
[PTBR+18] = 88;
[PTBR+19] = "0110";

// Process Table
[PROCESS_TABLE+48+1] = 1;           // PID
[PROCESS_TABLE+48+4] = CREATED;     // STATE
[PROCESS_TABLE+48+11] = 89;         // User Area Page
[PROCESS_TABLE+48+12] = 0;          // KPTR
[PROCESS_TABLE+48+13] = 8*512;      // UPTR
[PROCESS_TABLE+48+14] = PTBR;
[PROCESS_TABLE+48+15] = PTLR;

// Push entry point
[87*512] = [68*512 + 1];
